{"version":"1","pip_version":"25.0.1","install":[{"download_info":{"url":"https://files.pythonhosted.org/packages/fc/30/d4986a882011f9df997a55e6becd864812ccfcd821d64aac8570ee39f719/attrs-25.1.0-py3-none-any.whl","archive_info":{"hash":"sha256=c75a69e28a550a7e93789579c22aa26b0f5b83b75dc4e08fe092980051e1090a","hashes":{"sha256":"c75a69e28a550a7e93789579c22aa26b0f5b83b75dc4e08fe092980051e1090a"}}},"is_direct":false,"is_yanked":false,"requested":true,"metadata":{"metadata_version":"2.4","name":"attrs","version":"25.1.0","summary":"Classes Without Boilerplate","description_content_type":"text/markdown","keywords":["attribute","boilerplate","class"],"author_email":"Hynek Schlawack <hs@ox.cx>","license_expression":"MIT","license_file":["LICENSE"],"classifier":["Development Status :: 5 - Production/Stable","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.13","Programming Language :: Python :: Implementation :: CPython","Programming Language :: Python :: Implementation :: PyPy","Typing :: Typed"],"requires_dist":["cloudpickle; (platform_python_implementation == 'CPython') and extra == 'benchmark'","hypothesis; extra == 'benchmark'","mypy>=1.11.1; (platform_python_implementation == 'CPython' and python_version >= '3.10') and extra == 'benchmark'","pympler; extra == 'benchmark'","pytest-codspeed; extra == 'benchmark'","pytest-mypy-plugins; (platform_python_implementation == 'CPython' and python_version >= '3.10') and extra == 'benchmark'","pytest-xdist[psutil]; extra == 'benchmark'","pytest>=4.3.0; extra == 'benchmark'","cloudpickle; (platform_python_implementation == 'CPython') and extra == 'cov'","coverage[toml]>=5.3; extra == 'cov'","hypothesis; extra == 'cov'","mypy>=1.11.1; (platform_python_implementation == 'CPython' and python_version >= '3.10') and extra == 'cov'","pympler; extra == 'cov'","pytest-mypy-plugins; (platform_python_implementation == 'CPython' and python_version >= '3.10') and extra == 'cov'","pytest-xdist[psutil]; extra == 'cov'","pytest>=4.3.0; extra == 'cov'","cloudpickle; (platform_python_implementation == 'CPython') and extra == 'dev'","hypothesis; extra == 'dev'","mypy>=1.11.1; (platform_python_implementation == 'CPython' and python_version >= '3.10') and extra == 'dev'","pre-commit-uv; extra == 'dev'","pympler; extra == 'dev'","pytest-mypy-plugins; (platform_python_implementation == 'CPython' and python_version >= '3.10') and extra == 'dev'","pytest-xdist[psutil]; extra == 'dev'","pytest>=4.3.0; extra == 'dev'","cogapp; extra == 'docs'","furo; extra == 'docs'","myst-parser; extra == 'docs'","sphinx; extra == 'docs'","sphinx-notfound-page; extra == 'docs'","sphinxcontrib-towncrier; extra == 'docs'","towncrier<24.7; extra == 'docs'","cloudpickle; (platform_python_implementation == 'CPython') and extra == 'tests'","hypothesis; extra == 'tests'","mypy>=1.11.1; (platform_python_implementation == 'CPython' and python_version >= '3.10') and extra == 'tests'","pympler; extra == 'tests'","pytest-mypy-plugins; (platform_python_implementation == 'CPython' and python_version >= '3.10') and extra == 'tests'","pytest-xdist[psutil]; extra == 'tests'","pytest>=4.3.0; extra == 'tests'","mypy>=1.11.1; (platform_python_implementation == 'CPython' and python_version >= '3.10') and extra == 'tests-mypy'","pytest-mypy-plugins; (platform_python_implementation == 'CPython' and python_version >= '3.10') and extra == 'tests-mypy'"],"requires_python":">=3.8","project_url":["Documentation, https://www.attrs.org/","Changelog, https://www.attrs.org/en/stable/changelog.html","GitHub, https://github.com/python-attrs/attrs","Funding, https://github.com/sponsors/hynek","Tidelift, https://tidelift.com/subscription/pkg/pypi-attrs?utm_source=pypi-attrs&utm_medium=pypi"],"provides_extra":["benchmark","cov","dev","docs","tests","tests-mypy"],"description":"<p align=\"center\">\n  <a href=\"https://www.attrs.org/\">\n    <img src=\"https://raw.githubusercontent.com/python-attrs/attrs/main/docs/_static/attrs_logo.svg\" width=\"35%\" alt=\"attrs\" />\n  </a>\n</p>\n\n\n*attrs* is the Python package that will bring back the **joy** of **writing classes** by relieving you from the drudgery of implementing object protocols (aka [dunder methods](https://www.attrs.org/en/latest/glossary.html#term-dunder-methods)).\n[Trusted by NASA](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/personalizing-your-profile#list-of-qualifying-repositories-for-mars-2020-helicopter-contributor-achievement) for Mars missions since 2020!\n\nIts main goal is to help you to write **concise** and **correct** software without slowing down your code.\n\n\n## Sponsors\n\n*attrs* would not be possible without our [amazing sponsors](https://github.com/sponsors/hynek).\nEspecially those generously supporting us at the *The Organization* tier and higher:\n\n<!-- sponsor-break-begin -->\n\n<p align=\"center\">\n\n<!-- [[[cog\nimport pathlib, tomllib\n\nfor sponsor in tomllib.loads(pathlib.Path(\"pyproject.toml\").read_text())[\"tool\"][\"sponcon\"][\"sponsors\"]:\n      print(f'<a href=\"{sponsor[\"url\"]}\"><img title=\"{sponsor[\"title\"]}\" src=\"https://www.attrs.org/en/25.1.0/_static/sponsors/{sponsor[\"img\"]}\" width=\"190\" /></a>')\n]]] -->\n<a href=\"https://www.variomedia.de/\"><img title=\"Variomedia AG\" src=\"https://www.attrs.org/en/25.1.0/_static/sponsors/Variomedia.svg\" width=\"190\" /></a>\n<a href=\"https://tidelift.com/?utm_source=lifter&utm_medium=referral&utm_campaign=hynek\"><img title=\"Tidelift\" src=\"https://www.attrs.org/en/25.1.0/_static/sponsors/Tidelift.svg\" width=\"190\" /></a>\n<a href=\"https://klaviyo.com/\"><img title=\"Klaviyo\" src=\"https://www.attrs.org/en/25.1.0/_static/sponsors/Klaviyo.svg\" width=\"190\" /></a>\n<a href=\"https://www.emsys-renewables.com/\"><img title=\"emsys renewables\" src=\"https://www.attrs.org/en/25.1.0/_static/sponsors/emsys-renewables.svg\" width=\"190\" /></a>\n<a href=\"https://filepreviews.io/\"><img title=\"FilePreviews\" src=\"https://www.attrs.org/en/25.1.0/_static/sponsors/FilePreviews.svg\" width=\"190\" /></a>\n<a href=\"https://privacy-solutions.org/\"><img title=\"Privacy Solutions\" src=\"https://www.attrs.org/en/25.1.0/_static/sponsors/Privacy-Solutions.svg\" width=\"190\" /></a>\n<a href=\"https://polar.sh/\"><img title=\"Polar\" src=\"https://www.attrs.org/en/25.1.0/_static/sponsors/Polar.svg\" width=\"190\" /></a>\n<!-- [[[end]]] -->\n\n</p>\n\n<!-- sponsor-break-end -->\n\n<p align=\"center\">\n   <strong>Please consider <a href=\"https://github.com/sponsors/hynek\">joining them</a> to help make <em>attrs</em>’s maintenance more sustainable!</strong>\n</p>\n\n<!-- teaser-end -->\n\n## Example\n\n*attrs* gives you a class decorator and a way to declaratively define the attributes on that class:\n\n<!-- code-begin -->\n\n```pycon\n>>> from attrs import asdict, define, make_class, Factory\n\n>>> @define\n... class SomeClass:\n...     a_number: int = 42\n...     list_of_numbers: list[int] = Factory(list)\n...\n...     def hard_math(self, another_number):\n...         return self.a_number + sum(self.list_of_numbers) * another_number\n\n\n>>> sc = SomeClass(1, [1, 2, 3])\n>>> sc\nSomeClass(a_number=1, list_of_numbers=[1, 2, 3])\n\n>>> sc.hard_math(3)\n19\n>>> sc == SomeClass(1, [1, 2, 3])\nTrue\n>>> sc != SomeClass(2, [3, 2, 1])\nTrue\n\n>>> asdict(sc)\n{'a_number': 1, 'list_of_numbers': [1, 2, 3]}\n\n>>> SomeClass()\nSomeClass(a_number=42, list_of_numbers=[])\n\n>>> C = make_class(\"C\", [\"a\", \"b\"])\n>>> C(\"foo\", \"bar\")\nC(a='foo', b='bar')\n```\n\nAfter *declaring* your attributes, *attrs* gives you:\n\n- a concise and explicit overview of the class's attributes,\n- a nice human-readable `__repr__`,\n- equality-checking methods,\n- an initializer,\n- and much more,\n\n*without* writing dull boilerplate code again and again and *without* runtime performance penalties.\n\n---\n\nThis example uses *attrs*'s modern APIs that have been introduced in version 20.1.0, and the *attrs* package import name that has been added in version 21.3.0.\nThe classic APIs (`@attr.s`, `attr.ib`, plus their serious-business aliases) and the `attr` package import name will remain **indefinitely**.\n\nCheck out [*On The Core API Names*](https://www.attrs.org/en/latest/names.html) for an in-depth explanation!\n\n\n### Hate Type Annotations!?\n\nNo problem!\nTypes are entirely **optional** with *attrs*.\nSimply assign `attrs.field()` to the attributes instead of annotating them with types:\n\n```python\nfrom attrs import define, field\n\n@define\nclass SomeClass:\n    a_number = field(default=42)\n    list_of_numbers = field(factory=list)\n```\n\n\n## Data Classes\n\nOn the tin, *attrs* might remind you of `dataclasses` (and indeed, `dataclasses` [are a descendant](https://hynek.me/articles/import-attrs/) of *attrs*).\nIn practice it does a lot more and is more flexible.\nFor instance, it allows you to define [special handling of NumPy arrays for equality checks](https://www.attrs.org/en/stable/comparison.html#customization), allows more ways to [plug into the initialization process](https://www.attrs.org/en/stable/init.html#hooking-yourself-into-initialization), has a replacement for `__init_subclass__`, and allows for stepping through the generated methods using a debugger.\n\nFor more details, please refer to our [comparison page](https://www.attrs.org/en/stable/why.html#data-classes), but generally speaking, we are more likely to commit crimes against nature to make things work that one would expect to work, but that are quite complicated in practice.\n\n\n## Project Information\n\n- [**Changelog**](https://www.attrs.org/en/stable/changelog.html)\n- [**Documentation**](https://www.attrs.org/)\n- [**PyPI**](https://pypi.org/project/attrs/)\n- [**Source Code**](https://github.com/python-attrs/attrs)\n- [**Contributing**](https://github.com/python-attrs/attrs/blob/main/.github/CONTRIBUTING.md)\n- [**Third-party Extensions**](https://github.com/python-attrs/attrs/wiki/Extensions-to-attrs)\n- **Get Help**: use the `python-attrs` tag on [Stack Overflow](https://stackoverflow.com/questions/tagged/python-attrs)\n\n\n### *attrs* for Enterprise\n\nAvailable as part of the [Tidelift Subscription](https://tidelift.com/?utm_source=lifter&utm_medium=referral&utm_campaign=hynek).\n\nThe maintainers of *attrs* and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source packages you use to build your applications.\nSave time, reduce risk, and improve code health, while paying the maintainers of the exact packages you use.\n\n## Release Information\n\n### Changes\n\n- This release only ensures correct PyPI licensing metadata.\n  [#1386](https://github.com/python-attrs/attrs/issues/1386)\n\n\n\n---\n\n[Full changelog →](https://www.attrs.org/en/stable/changelog.html)\n"}},{"download_info":{"url":"https://files.pythonhosted.org/packages/c8/d5/867e75361fc45f6de75fe277dd085627a9db5ebb511a87f27dc1396b5351/cattrs-24.1.2-py3-none-any.whl","archive_info":{"hash":"sha256=67c7495b760168d931a10233f979b28dc04daf853b30752246f4f8471c6d68d0","hashes":{"sha256":"67c7495b760168d931a10233f979b28dc04daf853b30752246f4f8471c6d68d0"}}},"is_direct":false,"is_yanked":false,"requested":true,"metadata":{"metadata_version":"2.3","name":"cattrs","version":"24.1.2","summary":"Composable complex class support for attrs and dataclasses.","description_content_type":"text/markdown","keywords":["attrs","dataclasses","serialization"],"author_email":"Tin Tvrtkovic <tinchester@gmail.com>","license":"MIT","license_file":["LICENSE"],"classifier":["Development Status :: 5 - Production/Stable","Intended Audience :: Developers","License :: OSI Approved :: MIT License","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: Implementation :: CPython","Programming Language :: Python :: Implementation :: PyPy","Typing :: Typed"],"requires_dist":["attrs>=23.1.0","exceptiongroup>=1.1.1; python_version < '3.11'","typing-extensions!=4.6.3,>=4.1.0; python_version < '3.11'","pymongo>=4.4.0; extra == 'bson'","cbor2>=5.4.6; extra == 'cbor2'","msgpack>=1.0.5; extra == 'msgpack'","msgspec>=0.18.5; (implementation_name == 'cpython') and extra == 'msgspec'","orjson>=3.9.2; (implementation_name == 'cpython') and extra == 'orjson'","pyyaml>=6.0; extra == 'pyyaml'","tomlkit>=0.11.8; extra == 'tomlkit'","ujson>=5.7.0; extra == 'ujson'"],"requires_python":">=3.8","project_url":["Homepage, https://catt.rs","Changelog, https://catt.rs/en/latest/history.html","Bug Tracker, https://github.com/python-attrs/cattrs/issues","Repository, https://github.com/python-attrs/cattrs","Documentation, https://catt.rs/en/stable/"],"provides_extra":["bson","cbor2","msgpack","msgspec","orjson","pyyaml","tomlkit","ujson"],"description":"# *cattrs*: Flexible Object Serialization and Validation\n\n*Because validation belongs to the edges.*\n\n[![Documentation](https://img.shields.io/badge/Docs-Read%20The%20Docs-black)](https://catt.rs/)\n[![License: MIT](https://img.shields.io/badge/license-MIT-C06524)](https://github.com/hynek/stamina/blob/main/LICENSE)\n[![PyPI](https://img.shields.io/pypi/v/cattrs.svg)](https://pypi.python.org/pypi/cattrs)\n[![Supported Python Versions](https://img.shields.io/pypi/pyversions/cattrs.svg)](https://github.com/python-attrs/cattrs)\n[![Downloads](https://static.pepy.tech/badge/cattrs/month)](https://pepy.tech/project/cattrs)\n[![Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/Tinche/22405310d6a663164d894a2beab4d44d/raw/covbadge.json)](https://github.com/python-attrs/cattrs/actions/workflows/main.yml)\n\n---\n\n<!-- begin-teaser -->\n\n**cattrs** is a Swiss Army knife for (un)structuring and validating data in Python.\nIn practice, that means it converts **unstructured dictionaries** into **proper classes** and back, while **validating** their contents.\n\n<!-- end-teaser -->\n\n\n## Example\n\n<!-- begin-example -->\n\n_cattrs_ works best with [_attrs_](https://www.attrs.org/) classes, and [dataclasses](https://docs.python.org/3/library/dataclasses.html) where simple (un-)structuring works out of the box, even for nested data, without polluting your data model with serialization details:\n\n```python\n>>> from attrs import define\n>>> from cattrs import structure, unstructure\n>>> @define\n... class C:\n...     a: int\n...     b: list[str]\n>>> instance = structure({'a': 1, 'b': ['x', 'y']}, C)\n>>> instance\nC(a=1, b=['x', 'y'])\n>>> unstructure(instance)\n{'a': 1, 'b': ['x', 'y']}\n```\n\n<!-- end-teaser -->\n<!-- end-example -->\n\nHave a look at [*Why *cattrs*?*](https://catt.rs/en/latest/why.html) for more examples!\n\n<!-- begin-why -->\n\n## Features\n\n### Recursive Unstructuring\n\n- _attrs_ classes and dataclasses are converted into dictionaries in a way similar to `attrs.asdict()`, or into tuples in a way similar to `attrs.astuple()`.\n- Enumeration instances are converted to their values.\n- Other types are let through without conversion. This includes types such as integers, dictionaries, lists and instances of non-_attrs_ classes.\n- Custom converters for any type can be registered using `register_unstructure_hook`.\n\n\n### Recursive Structuring\n\nConverts unstructured data into structured data, recursively, according to your specification given as a type.\nThe following types are supported:\n\n- `typing.Optional[T]` and its 3.10+ form, `T | None`.\n- `list[T]`, `typing.List[T]`, `typing.MutableSequence[T]`, `typing.Sequence[T]` convert to a lists.\n- `tuple` and `typing.Tuple` (both variants, `tuple[T, ...]` and `tuple[X, Y, Z]`).\n- `set[T]`, `typing.MutableSet[T]`, and `typing.Set[T]` convert to a sets.\n- `frozenset[T]`, and `typing.FrozenSet[T]` convert to a frozensets.\n- `dict[K, V]`, `typing.Dict[K, V]`, `typing.MutableMapping[K, V]`, and `typing.Mapping[K, V]` convert to a dictionaries.\n- [`typing.TypedDict`](https://docs.python.org/3/library/typing.html#typing.TypedDict), ordinary and generic.\n- [`typing.NewType`](https://docs.python.org/3/library/typing.html#newtype)\n- [PEP 695 type aliases](https://docs.python.org/3/library/typing.html#type-aliases) on 3.12+\n- _attrs_ classes with simple attributes and the usual `__init__`[^simple].\n- All _attrs_ classes and dataclasses with the usual `__init__`, if their complex attributes have type metadata.\n- Unions of supported _attrs_ classes, given that all of the classes have a unique field.\n- Unions of anything, if you provide a disambiguation function for it.\n- Custom converters for any type can be registered using `register_structure_hook`.\n\n[^simple]: Simple attributes are attributes that can be assigned unstructured data, like numbers, strings, and collections of unstructured data.\n\n\n### Batteries Included\n\n_cattrs_ comes with pre-configured converters for a number of serialization libraries, including JSON (standard library, [_orjson_](https://pypi.org/project/orjson/), [UltraJSON](https://pypi.org/project/ujson/)), [_msgpack_](https://pypi.org/project/msgpack/), [_cbor2_](https://pypi.org/project/cbor2/), [_bson_](https://pypi.org/project/bson/), [PyYAML](https://pypi.org/project/PyYAML/), [_tomlkit_](https://pypi.org/project/tomlkit/) and [_msgspec_](https://pypi.org/project/msgspec/) (supports only JSON at this time).\n\nFor details, see the [cattrs.preconf package](https://catt.rs/en/stable/preconf.html).\n\n\n## Design Decisions\n\n_cattrs_ is based on a few fundamental design decisions:\n\n- Un/structuring rules are separate from the models.\n  This allows models to have a one-to-many relationship with un/structuring rules, and to create un/structuring rules for models which you do not own and you cannot change.\n  (_cattrs_ can be configured to use un/structuring rules from models using the [`use_class_methods` strategy](https://catt.rs/en/latest/strategies.html#using-class-specific-structure-and-unstructure-methods).)\n- Invent as little as possible; reuse existing ordinary Python instead.\n  For example, _cattrs_ did not have a custom exception type to group exceptions until the sanctioned Python [`exceptiongroups`](https://docs.python.org/3/library/exceptions.html#ExceptionGroup).\n  A side-effect of this design decision is that, in a lot of cases, when you're solving _cattrs_ problems you're actually learning Python instead of learning _cattrs_.\n- Resist the temptation to guess.\n  If there are two ways of solving a problem, _cattrs_ should refuse to guess and let the user configure it themselves.\n\nA foolish consistency is the hobgoblin of little minds, so these decisions can and are sometimes broken, but they have proven to be a good foundation.\n\n\n<!-- end-why -->\n\n## Credits\n\nMajor credits to Hynek Schlawack for creating [attrs](https://attrs.org) and its predecessor, [characteristic](https://github.com/hynek/characteristic).\n\n_cattrs_ is tested with [Hypothesis](http://hypothesis.readthedocs.io/en/latest/), by David R. MacIver.\n\n_cattrs_ is benchmarked using [perf](https://github.com/haypo/perf) and [pytest-benchmark](https://pytest-benchmark.readthedocs.io/en/latest/index.html).\n\nThis package was created with [Cookiecutter](https://github.com/audreyr/cookiecutter) and the [`audreyr/cookiecutter-pypackage`](https://github.com/audreyr/cookiecutter-pypackage) project template.\n"}},{"download_info":{"url":"https://files.pythonhosted.org/packages/02/cc/b7e31358aac6ed1ef2bb790a9746ac2c69bcb3c8588b41616914eb106eaf/exceptiongroup-1.2.2-py3-none-any.whl","archive_info":{"hash":"sha256=3111b9d131c238bec2f8f516e123e14ba243563fb135d3fe885990585aa7795b","hashes":{"sha256":"3111b9d131c238bec2f8f516e123e14ba243563fb135d3fe885990585aa7795b"}}},"is_direct":false,"is_yanked":false,"requested":true,"metadata":{"metadata_version":"2.1","name":"exceptiongroup","version":"1.2.2","summary":"Backport of PEP 654 (exception groups)","description_content_type":"text/x-rst","author_email":"Alex Grönholm <alex.gronholm@nextday.fi>","classifier":["Development Status :: 5 - Production/Stable","Intended Audience :: Developers","License :: OSI Approved :: MIT License","Programming Language :: Python","Programming Language :: Python :: 3 :: Only","Typing :: Typed"],"requires_dist":["pytest >= 6 ; extra == \"test\""],"requires_python":">=3.7","project_url":["Changelog, https://github.com/agronholm/exceptiongroup/blob/main/CHANGES.rst","Issue Tracker, https://github.com/agronholm/exceptiongroup/issues","Source code, https://github.com/agronholm/exceptiongroup"],"provides_extra":["test"],"description":".. image:: https://github.com/agronholm/exceptiongroup/actions/workflows/test.yml/badge.svg\n  :target: https://github.com/agronholm/exceptiongroup/actions/workflows/test.yml\n  :alt: Build Status\n.. image:: https://coveralls.io/repos/github/agronholm/exceptiongroup/badge.svg?branch=main\n  :target: https://coveralls.io/github/agronholm/exceptiongroup?branch=main\n  :alt: Code Coverage\n\nThis is a backport of the ``BaseExceptionGroup`` and ``ExceptionGroup`` classes from\nPython 3.11.\n\nIt contains the following:\n\n* The  ``exceptiongroup.BaseExceptionGroup`` and ``exceptiongroup.ExceptionGroup``\n  classes\n* A utility function (``exceptiongroup.catch()``) for catching exceptions possibly\n  nested in an exception group\n* Patches to the ``TracebackException`` class that properly formats exception groups\n  (installed on import)\n* An exception hook that handles formatting of exception groups through\n  ``TracebackException`` (installed on import)\n* Special versions of some of the functions from the ``traceback`` module, modified to\n  correctly handle exception groups even when monkey patching is disabled, or blocked by\n  another custom exception hook:\n\n  * ``traceback.format_exception()``\n  * ``traceback.format_exception_only()``\n  * ``traceback.print_exception()``\n  * ``traceback.print_exc()``\n* A backported version of ``contextlib.suppress()`` from Python 3.12.1 which also\n  handles suppressing exceptions inside exception groups\n\nIf this package is imported on Python 3.11 or later, the built-in implementations of the\nexception group classes are used instead, ``TracebackException`` is not monkey patched\nand the exception hook won't be installed.\n\nSee the `standard library documentation`_ for more information on exception groups.\n\n.. _standard library documentation: https://docs.python.org/3/library/exceptions.html\n\nCatching exceptions\n===================\n\nDue to the lack of the ``except*`` syntax introduced by `PEP 654`_ in earlier Python\nversions, you need to use ``exceptiongroup.catch()`` to catch exceptions that are\npotentially nested inside an exception group. This function returns a context manager\nthat calls the given handler for any exceptions matching the sole argument.\n\nThe argument to ``catch()`` must be a dict (or any ``Mapping``) where each key is either\nan exception class or an iterable of exception classes. Each value must be a callable\nthat takes a single positional argument. The handler will be called at most once, with\nan exception group as an argument which will contain all the exceptions that are any\nof the given types, or their subclasses. The exception group may contain nested groups\ncontaining more matching exceptions.\n\nThus, the following Python 3.11+ code:\n\n.. code-block:: python\n\n    try:\n        ...\n    except* (ValueError, KeyError) as excgroup:\n        for exc in excgroup.exceptions:\n            print('Caught exception:', type(exc))\n    except* RuntimeError:\n        print('Caught runtime error')\n\nwould be written with this backport like this:\n\n.. code-block:: python\n\n    from exceptiongroup import BaseExceptionGroup, catch\n\n    def value_key_err_handler(excgroup: BaseExceptionGroup) -> None:\n        for exc in excgroup.exceptions:\n            print('Caught exception:', type(exc))\n\n    def runtime_err_handler(exc: BaseExceptionGroup) -> None:\n        print('Caught runtime error')\n\n    with catch({\n        (ValueError, KeyError): value_key_err_handler,\n        RuntimeError: runtime_err_handler\n    }):\n        ...\n\n**NOTE**: Just like with ``except*``, you cannot handle ``BaseExceptionGroup`` or\n``ExceptionGroup`` with ``catch()``.\n\nSuppressing exceptions\n======================\n\nThis library contains a backport of the ``contextlib.suppress()`` context manager from\nPython 3.12.1. It allows you to selectively ignore certain exceptions, even when they're\ninside exception groups:\n\n.. code-block:: python\n\n    from exceptiongroup import suppress\n\n    with suppress(RuntimeError):\n        raise ExceptionGroup(\"\", [RuntimeError(\"boo\")])\n\nNotes on monkey patching\n========================\n\nTo make exception groups render properly when an unhandled exception group is being\nprinted out, this package does two things when it is imported on any Python version\nearlier than 3.11:\n\n#. The  ``traceback.TracebackException`` class is monkey patched to store extra\n   information about exception groups (in ``__init__()``) and properly format them (in\n   ``format()``)\n#. An exception hook is installed at ``sys.excepthook``, provided that no other hook is\n   already present. This hook causes the exception to be formatted using\n   ``traceback.TracebackException`` rather than the built-in rendered.\n\nIf ``sys.exceptionhook`` is found to be set to something else than the default when\n``exceptiongroup`` is imported, no monkeypatching is done at all.\n\nTo prevent the exception hook and patches from being installed, set the environment\nvariable ``EXCEPTIONGROUP_NO_PATCH`` to ``1``.\n\nFormatting exception groups\n---------------------------\n\nNormally, the monkey patching applied by this library on import will cause exception\ngroups to be printed properly in tracebacks. But in cases when the monkey patching is\nblocked by a third party exception hook, or monkey patching is explicitly disabled,\nyou can still manually format exceptions using the special versions of the ``traceback``\nfunctions, like ``format_exception()``, listed at the top of this page. They work just\nlike their counterparts in the ``traceback`` module, except that they use a separately\npatched subclass of ``TracebackException`` to perform the rendering.\n\nParticularly in cases where a library installs its own exception hook, it is recommended\nto use these special versions to do the actual formatting of exceptions/tracebacks.\n\n.. _PEP 654: https://www.python.org/dev/peps/pep-0654/\n\n"}},{"download_info":{"url":"https://files.pythonhosted.org/packages/d1/b3/8def84f539e7d2289a02f0524b944b15d7c75dab7628bedf1c4f0992029c/isort-5.13.2-py3-none-any.whl","archive_info":{"hash":"sha256=8ca5e72a8d85860d5a3fa69b8745237f2939afe12dbf656afbcb47fe72d947a6","hashes":{"sha256":"8ca5e72a8d85860d5a3fa69b8745237f2939afe12dbf656afbcb47fe72d947a6"}}},"is_direct":false,"is_yanked":false,"requested":true,"metadata":{"metadata_version":"2.1","name":"isort","version":"5.13.2","summary":"A Python utility / library to sort Python imports.","description_content_type":"text/markdown","keywords":["Refactor","Lint","Imports","Sort","Clean"],"home_page":"https://pycqa.github.io/isort/","author":"Timothy Crosley","author_email":"timothy.crosley@gmail.com","license":"MIT","classifier":["Development Status :: 6 - Mature","Environment :: Console","Intended Audience :: Developers","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3","Programming Language :: Python :: 3 :: Only","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Programming Language :: Python :: Implementation :: CPython","Programming Language :: Python :: Implementation :: PyPy","Topic :: Software Development :: Libraries","Topic :: Utilities"],"requires_dist":["colorama (>=0.4.6) ; extra == \"colors\""],"requires_python":">=3.8.0","project_url":["Changelog, https://github.com/pycqa/isort/blob/main/CHANGELOG.md","Documentation, https://pycqa.github.io/isort/","Repository, https://github.com/pycqa/isort"],"provides_extra":["colors","plugins"],"description":"[![isort - isort your imports, so you don't have to.](https://raw.githubusercontent.com/pycqa/isort/main/art/logo_large.png)](https://pycqa.github.io/isort/)\n\n------------------------------------------------------------------------\n\n[![PyPI version](https://badge.fury.io/py/isort.svg)](https://badge.fury.io/py/isort)\n[![Test Status](https://github.com/pycqa/isort/workflows/Test/badge.svg?branch=develop)](https://github.com/pycqa/isort/actions?query=workflow%3ATest)\n[![Lint Status](https://github.com/pycqa/isort/workflows/Lint/badge.svg?branch=develop)](https://github.com/pycqa/isort/actions?query=workflow%3ALint)\n[![Code coverage Status](https://codecov.io/gh/pycqa/isort/branch/main/graph/badge.svg)](https://codecov.io/gh/pycqa/isort)\n[![License](https://img.shields.io/github/license/mashape/apistatus.svg)](https://pypi.org/project/isort/)\n[![Join the chat at https://gitter.im/timothycrosley/isort](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/timothycrosley/isort?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Downloads](https://pepy.tech/badge/isort)](https://pepy.tech/project/isort)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![Imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&labelColor=ef8336)](https://pycqa.github.io/isort/)\n[![DeepSource](https://static.deepsource.io/deepsource-badge-light-mini.svg)](https://deepsource.io/gh/pycqa/isort/?ref=repository-badge)\n_________________\n\n[Read Latest Documentation](https://pycqa.github.io/isort/) - [Browse GitHub Code Repository](https://github.com/pycqa/isort/)\n_________________\n\nisort your imports, so you don't have to.\n\nisort is a Python utility / library to sort imports alphabetically and\nautomatically separate into sections and by type. It provides a command line\nutility, Python library and [plugins for various\neditors](https://github.com/pycqa/isort/wiki/isort-Plugins) to\nquickly sort all your imports. It requires Python 3.8+ to run but\nsupports formatting Python 2 code too.\n\n- [Try isort now from your browser!](https://pycqa.github.io/isort/docs/quick_start/0.-try.html)\n- [Using black? See the isort and black compatibility guide.](https://pycqa.github.io/isort/docs/configuration/black_compatibility.html)\n- [isort has official support for pre-commit!](https://pycqa.github.io/isort/docs/configuration/pre-commit.html)\n\n![Example Usage](https://raw.github.com/pycqa/isort/main/example.gif)\n\nBefore isort:\n\n```python\nfrom my_lib import Object\n\nimport os\n\nfrom my_lib import Object3\n\nfrom my_lib import Object2\n\nimport sys\n\nfrom third_party import lib15, lib1, lib2, lib3, lib4, lib5, lib6, lib7, lib8, lib9, lib10, lib11, lib12, lib13, lib14\n\nimport sys\n\nfrom __future__ import absolute_import\n\nfrom third_party import lib3\n\nprint(\"Hey\")\nprint(\"yo\")\n```\n\nAfter isort:\n\n```python\nfrom __future__ import absolute_import\n\nimport os\nimport sys\n\nfrom third_party import (lib1, lib2, lib3, lib4, lib5, lib6, lib7, lib8,\n                         lib9, lib10, lib11, lib12, lib13, lib14, lib15)\n\nfrom my_lib import Object, Object2, Object3\n\nprint(\"Hey\")\nprint(\"yo\")\n```\n\n## Installing isort\n\nInstalling isort is as simple as:\n\n```bash\npip install isort\n```\n\n## Using isort\n\n**From the command line**:\n\nTo run on specific files:\n\n```bash\nisort mypythonfile.py mypythonfile2.py\n```\n\nTo apply recursively:\n\n```bash\nisort .\n```\n\nIf [globstar](https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html)\nis enabled, `isort .` is equivalent to:\n\n```bash\nisort **/*.py\n```\n\nTo view proposed changes without applying them:\n\n```bash\nisort mypythonfile.py --diff\n```\n\nFinally, to atomically run isort against a project, only applying\nchanges if they don't introduce syntax errors:\n\n```bash\nisort --atomic .\n```\n\n(Note: this is disabled by default, as it prevents isort from\nrunning against code written using a different version of Python.)\n\n**From within Python**:\n\n```python\nimport isort\n\nisort.file(\"pythonfile.py\")\n```\n\nor:\n\n```python\nimport isort\n\nsorted_code = isort.code(\"import b\\nimport a\\n\")\n```\n\n## Installing isort's for your preferred text editor\n\nSeveral plugins have been written that enable to use isort from within a\nvariety of text-editors. You can find a full list of them [on the isort\nwiki](https://github.com/pycqa/isort/wiki/isort-Plugins).\nAdditionally, I will enthusiastically accept pull requests that include\nplugins for other text editors and add documentation for them as I am\nnotified.\n\n## Multi line output modes\n\nYou will notice above the \\\"multi\\_line\\_output\\\" setting. This setting\ndefines how from imports wrap when they extend past the line\\_length\nlimit and has [12 possible settings](https://pycqa.github.io/isort/docs/configuration/multi_line_output_modes.html).\n\n## Indentation\n\nTo change the how constant indents appear - simply change the\nindent property with the following accepted formats:\n\n-   Number of spaces you would like. For example: 4 would cause standard\n    4 space indentation.\n-   Tab\n-   A verbatim string with quotes around it.\n\nFor example:\n\n```python\n\"    \"\n```\n\nis equivalent to 4.\n\nFor the import styles that use parentheses, you can control whether or\nnot to include a trailing comma after the last import with the\n`include_trailing_comma` option (defaults to `False`).\n\n## Intelligently Balanced Multi-line Imports\n\nAs of isort 3.1.0 support for balanced multi-line imports has been\nadded. With this enabled isort will dynamically change the import length\nto the one that produces the most balanced grid, while staying below the\nmaximum import length defined.\n\nExample:\n\n```python\nfrom __future__ import (absolute_import, division,\n                        print_function, unicode_literals)\n```\n\nWill be produced instead of:\n\n```python\nfrom __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n```\n\nTo enable this set `balanced_wrapping` to `True` in your config or pass\nthe `-e` option into the command line utility.\n\n## Custom Sections and Ordering\n\nisort provides configuration options to change almost every aspect of how\nimports are organized, ordered, or grouped together in sections.\n\n[Click here](https://pycqa.github.io/isort/docs/configuration/custom_sections_and_ordering.html) for an overview of all these options.\n\n## Skip processing of imports (outside of configuration)\n\nTo make isort ignore a single import simply add a comment at the end of\nthe import line containing the text `isort:skip`:\n\n```python\nimport module  # isort:skip\n```\n\nor:\n\n```python\nfrom xyz import (abc,  # isort:skip\n                 yo,\n                 hey)\n```\n\nTo make isort skip an entire file simply add `isort:skip_file` to the\nmodule's doc string:\n\n```python\n\"\"\" my_module.py\n    Best module ever\n\n   isort:skip_file\n\"\"\"\n\nimport b\nimport a\n```\n\n## Adding or removing an import from multiple files\n\nisort can be ran or configured to add / remove imports automatically.\n\n[See a complete guide here.](https://pycqa.github.io/isort/docs/configuration/add_or_remove_imports.html)\n\n## Using isort to verify code\n\nThe `--check-only` option\n-------------------------\n\nisort can also be used to verify that code is correctly formatted\nby running it with `-c`. Any files that contain incorrectly sorted\nand/or formatted imports will be outputted to `stderr`.\n\n```bash\nisort **/*.py -c -v\n\nSUCCESS: /home/timothy/Projects/Open_Source/isort/isort_kate_plugin.py Everything Looks Good!\nERROR: /home/timothy/Projects/Open_Source/isort/isort/isort.py Imports are incorrectly sorted.\n```\n\nOne great place this can be used is with a pre-commit git hook, such as\nthis one by \\@acdha:\n\n<https://gist.github.com/acdha/8717683>\n\nThis can help to ensure a certain level of code quality throughout a\nproject.\n\n## Git hook\n\nisort provides a hook function that can be integrated into your Git\npre-commit script to check Python code before committing.\n\n[More info here.](https://pycqa.github.io/isort/docs/configuration/git_hook.html)\n\n## Setuptools integration\n\nUpon installation, isort enables a `setuptools` command that checks\nPython files declared by your project.\n\n[More info here.](https://pycqa.github.io/isort/docs/configuration/setuptools_integration.html)\n\n## Spread the word\n\n[![Imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&labelColor=ef8336)](https://pycqa.github.io/isort/)\n\nPlace this badge at the top of your repository to let others know your project uses isort.\n\nFor README.md:\n\n```markdown\n[![Imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&labelColor=ef8336)](https://pycqa.github.io/isort/)\n```\n\nOr README.rst:\n\n```rst\n.. image:: https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&labelColor=ef8336\n    :target: https://pycqa.github.io/isort/\n```\n\n## Security contact information\n\nTo report a security vulnerability, please use the [Tidelift security\ncontact](https://tidelift.com/security). Tidelift will coordinate the\nfix and disclosure.\n\n## Why isort?\n\nisort simply stands for import sort. It was originally called\n\"sortImports\" however I got tired of typing the extra characters and\ncame to the realization camelCase is not pythonic.\n\nI wrote isort because in an organization I used to work in the manager\ncame in one day and decided all code must have alphabetically sorted\nimports. The code base was huge - and he meant for us to do it by hand.\nHowever, being a programmer - I\\'m too lazy to spend 8 hours mindlessly\nperforming a function, but not too lazy to spend 16 hours automating it.\nI was given permission to open source sortImports and here we are :)\n\n------------------------------------------------------------------------\n\n[Get professionally supported isort with the Tidelift\nSubscription](https://tidelift.com/subscription/pkg/pypi-isort?utm_source=pypi-isort&utm_medium=referral&utm_campaign=readme)\n\nProfessional support for isort is available as part of the [Tidelift\nSubscription](https://tidelift.com/subscription/pkg/pypi-isort?utm_source=pypi-isort&utm_medium=referral&utm_campaign=readme).\nTidelift gives software development teams a single source for purchasing\nand maintaining their software, with professional grade assurances from\nthe experts who know it best, while seamlessly integrating with existing\ntools.\n\n------------------------------------------------------------------------\n\nThanks and I hope you find isort useful!\n\n~Timothy Crosley\n\n"}},{"download_info":{"url":"https://files.pythonhosted.org/packages/8d/37/2351e48cb3309673492d3a8c59d407b75fb6630e560eb27ecd4da03adc9a/lsprotocol-2023.0.1-py3-none-any.whl","archive_info":{"hash":"sha256=c75223c9e4af2f24272b14c6375787438279369236cd568f596d4951052a60f2","hashes":{"sha256":"c75223c9e4af2f24272b14c6375787438279369236cd568f596d4951052a60f2"}}},"is_direct":false,"is_yanked":false,"requested":true,"metadata":{"metadata_version":"2.1","name":"lsprotocol","version":"2023.0.1","summary":"Python implementation of the Language Server Protocol.","description_content_type":"text/markdown","author_email":"Microsoft Corporation <lsprotocol-help@microsoft.com>","maintainer_email":"Brett Cannon <brett@python.org>, Karthik Nadig <kanadig@microsoft.com>","classifier":["Development Status :: 5 - Production/Stable","License :: OSI Approved :: MIT License","Programming Language :: Python","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: Implementation :: CPython","Programming Language :: Python :: Implementation :: PyPy"],"requires_dist":["attrs>=21.3.0","cattrs!=23.2.1"],"requires_python":">=3.7","project_url":["Issues, https://github.com/microsoft/lsprotocol/issues","Source, https://github.com/microsoft/lsprotocol"],"description":"# Language Server Protocol Types implementation for Python\n\n`lsprotocol` is a python implementation of object types used in the Language Server Protocol (LSP). This repository contains the code generator and the generated types for LSP.\n\n## Overview\n\nLSP is used by editors to communicate with various tools to enables services like code completion, documentation on hover, formatting, code analysis, etc. The intent of this library is to allow you to build on top of the types used by LSP. This repository will be kept up to date with the latest version of LSP as it is updated.\n\n## Installation\n\n`python -m pip install lsprotocol`\n\n## Usage\n\n### Using LSP types\n\n```python\nfrom lsprotocol import types\n\nposition = types.Position(line=10, character=3)\n```\n\n### Using built-in type converters\n\n```python\n# test.py\nimport json\nfrom lsprotocol import converters, types\n\nposition = types.Position(line=10, character=3)\nconverter = converters.get_converter()\nprint(json.dumps(converter.unstructure(position, unstructure_as=types.Position)))\n```\n\nOutput:\n\n```console\n> python test.py\n{\"line\": 10, \"character\": 3}\n```\n\n"}},{"download_info":{"url":"https://files.pythonhosted.org/packages/88/ef/eb23f262cca3c0c4eb7ab1933c3b1f03d021f2c48f54763065b6f0e321be/packaging-24.2-py3-none-any.whl","archive_info":{"hash":"sha256=09abb1bccd265c01f4a3aa3f7a7db064b36514d2cba19a2f694fe6150451a759","hashes":{"sha256":"09abb1bccd265c01f4a3aa3f7a7db064b36514d2cba19a2f694fe6150451a759"}}},"is_direct":false,"is_yanked":false,"requested":true,"metadata":{"metadata_version":"2.3","name":"packaging","version":"24.2","summary":"Core utilities for Python packages","description_content_type":"text/x-rst","author_email":"Donald Stufft <donald@stufft.io>","classifier":["Development Status :: 5 - Production/Stable","Intended Audience :: Developers","License :: OSI Approved :: Apache Software License","License :: OSI Approved :: BSD License","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3 :: Only","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.13","Programming Language :: Python :: Implementation :: CPython","Programming Language :: Python :: Implementation :: PyPy","Typing :: Typed"],"requires_python":">=3.8","project_url":["Documentation, https://packaging.pypa.io/","Source, https://github.com/pypa/packaging"],"description":"packaging\n=========\n\n.. start-intro\n\nReusable core utilities for various Python Packaging\n`interoperability specifications <https://packaging.python.org/specifications/>`_.\n\nThis library provides utilities that implement the interoperability\nspecifications which have clearly one correct behaviour (eg: :pep:`440`)\nor benefit greatly from having a single shared implementation (eg: :pep:`425`).\n\n.. end-intro\n\nThe ``packaging`` project includes the following: version handling, specifiers,\nmarkers, requirements, tags, utilities.\n\nDocumentation\n-------------\n\nThe `documentation`_ provides information and the API for the following:\n\n- Version Handling\n- Specifiers\n- Markers\n- Requirements\n- Tags\n- Utilities\n\nInstallation\n------------\n\nUse ``pip`` to install these utilities::\n\n    pip install packaging\n\nThe ``packaging`` library uses calendar-based versioning (``YY.N``).\n\nDiscussion\n----------\n\nIf you run into bugs, you can file them in our `issue tracker`_.\n\nYou can also join ``#pypa`` on Freenode to ask questions or get involved.\n\n\n.. _`documentation`: https://packaging.pypa.io/\n.. _`issue tracker`: https://github.com/pypa/packaging/issues\n\n\nCode of Conduct\n---------------\n\nEveryone interacting in the packaging project's codebases, issue trackers, chat\nrooms, and mailing lists is expected to follow the `PSF Code of Conduct`_.\n\n.. _PSF Code of Conduct: https://github.com/pypa/.github/blob/main/CODE_OF_CONDUCT.md\n\nContributing\n------------\n\nThe ``CONTRIBUTING.rst`` file outlines how to contribute to this project as\nwell as how to report a potential security issue. The documentation for this\nproject also covers information about `project development`_ and `security`_.\n\n.. _`project development`: https://packaging.pypa.io/en/latest/development/\n.. _`security`: https://packaging.pypa.io/en/latest/security/\n\nProject History\n---------------\n\nPlease review the ``CHANGELOG.rst`` file or the `Changelog documentation`_ for\nrecent changes and project history.\n\n.. _`Changelog documentation`: https://packaging.pypa.io/en/latest/changelog/\n\n"}},{"download_info":{"url":"https://files.pythonhosted.org/packages/11/19/b74a10dd24548e96e8c80226cbacb28b021bc3a168a7d2709fb0d0185348/pygls-1.3.1-py3-none-any.whl","archive_info":{"hash":"sha256=6e00f11efc56321bdeb6eac04f6d86131f654c7d49124344a9ebb968da3dd91e","hashes":{"sha256":"6e00f11efc56321bdeb6eac04f6d86131f654c7d49124344a9ebb968da3dd91e"}}},"is_direct":false,"is_yanked":false,"requested":true,"metadata":{"metadata_version":"2.1","name":"pygls","version":"1.3.1","summary":"A pythonic generic language server (pronounced like 'pie glass')","description_content_type":"text/markdown","home_page":"https://github.com/openlawlibrary/pygls","author":"Open Law Library","author_email":"info@openlawlib.org","maintainer":"Tom BH","maintainer_email":"tom@tombh.co.uk","license":"Apache-2.0","classifier":["License :: OSI Approved :: Apache Software License","Programming Language :: Python :: 3","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12"],"requires_dist":["cattrs (>=23.1.2)","lsprotocol (==2023.0.1)","websockets (>=11.0.3) ; extra == \"ws\""],"requires_python":">=3.8","project_url":["Documentation, https://pygls.readthedocs.io/en/latest","Repository, https://github.com/openlawlibrary/pygls"],"provides_extra":["ws"],"description":"[![PyPI Version](https://img.shields.io/pypi/v/pygls.svg)](https://pypi.org/project/pygls/) ![!pyversions](https://img.shields.io/pypi/pyversions/pygls.svg) ![license](https://img.shields.io/pypi/l/pygls.svg) [![Documentation Status](https://img.shields.io/badge/docs-latest-green.svg)](https://pygls.readthedocs.io/en/latest/)\n\n# pygls: The Generic Language Server Framework\n\n_pygls_ (pronounced like \"pie glass\") is a pythonic generic implementation of the [Language Server Protocol](https://microsoft.github.io/language-server-protocol/specification) for use as a foundation for writing your own [Language Servers](https://langserver.org/) in just a few lines of code.\n\n## Quickstart\n```python\nfrom pygls.server import LanguageServer\nfrom lsprotocol.types import (\n    TEXT_DOCUMENT_COMPLETION,\n    CompletionItem,\n    CompletionList,\n    CompletionParams,\n)\n\nserver = LanguageServer(\"example-server\", \"v0.1\")\n\n@server.feature(TEXT_DOCUMENT_COMPLETION)\ndef completions(params: CompletionParams):\n    items = []\n    document = server.workspace.get_document(params.text_document.uri)\n    current_line = document.lines[params.position.line].strip()\n    if current_line.endswith(\"hello.\"):\n        items = [\n            CompletionItem(label=\"world\"),\n            CompletionItem(label=\"friend\"),\n        ]\n    return CompletionList(is_incomplete=False, items=items)\n\nserver.start_io()\n```\n\nWhich might look something like this when you trigger autocompletion in your editor:\n\n![completions](https://raw.githubusercontent.com/openlawlibrary/pygls/master/docs/assets/hello-world-completion.png)\n\n## Docs and Tutorial\n\nThe full documentation and a tutorial are available at <https://pygls.readthedocs.io/en/latest/>.\n\n## Projects based on _pygls_\n\nWe keep a table of all known _pygls_ [implementations](https://github.com/openlawlibrary/pygls/blob/master/Implementations.md). Please submit a Pull Request with your own or any that you find are missing.\n\n## Alternatives\n\nThe main alternative to _pygls_ is Microsoft's [NodeJS-based Generic Language Server Framework](https://github.com/microsoft/vscode-languageserver-node). Being from Microsoft it is focussed on extending VSCode, although in theory it could be used to support any editor. So this is where pygls might be a better choice if you want to support more editors, as pygls is not focussed around VSCode.\n\nThere are also other Language Servers with \"general\" in their descriptons, or at least intentions. They are however only general in the sense of having powerful _configuration_. They achieve generality in so much as configuration is able to, as opposed to what programming (in _pygls'_ case) can achieve.\n  * https://github.com/iamcco/diagnostic-languageserver\n  * https://github.com/mattn/efm-langserver\n  * https://github.com/jose-elias-alvarez/null-ls.nvim (Neovim only)\n\n## Tests\nAll Pygls sub-tasks require the Poetry `poe` plugin: https://github.com/nat-n/poethepoet\n\n* `poetry install --all-extras`\n* `poetry run poe test`\n* `poetry run poe test-pyodide`\n\n\n## Contributing\n\nYour contributions to _pygls_ are most welcome ❤️ Please review the [Contributing](https://github.com/openlawlibrary/pygls/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/openlawlibrary/pygls/blob/master/CODE_OF_CONDUCT.md) documents for how to get started.\n\n## Donating\n\n[Open Law Library](http://www.openlawlib.org/) is a 501(c)(3) tax exempt organization. Help us maintain our open source projects and open the law to all with [sponsorship](https://github.com/sponsors/openlawlibrary).\n\n### Supporters\n\nWe would like to give special thanks to the following supporters:\n* [mpourmpoulis](https://github.com/mpourmpoulis)\n\n## License\n\nApache-2.0\n\n"}},{"download_info":{"url":"https://files.pythonhosted.org/packages/26/9f/ad63fc0248c5379346306f8668cda6e2e2e9c95e01216d2b8ffd9ff037d0/typing_extensions-4.12.2-py3-none-any.whl","archive_info":{"hash":"sha256=04e5ca0351e0f3f85c6853954072df659d0d13fac324d0072316b67d7794700d","hashes":{"sha256":"04e5ca0351e0f3f85c6853954072df659d0d13fac324d0072316b67d7794700d"}}},"is_direct":false,"is_yanked":false,"requested":true,"metadata":{"metadata_version":"2.1","name":"typing_extensions","version":"4.12.2","summary":"Backported and Experimental Type Hints for Python 3.8+","description_content_type":"text/markdown","keywords":["annotations","backport","checker","checking","function","hinting","hints","type","typechecking","typehinting","typehints","typing"],"author_email":"\"Guido van Rossum, Jukka Lehtosalo, Łukasz Langa, Michael Lee\" <levkivskyi@gmail.com>","classifier":["Development Status :: 5 - Production/Stable","Environment :: Console","Intended Audience :: Developers","License :: OSI Approved :: Python Software Foundation License","Operating System :: OS Independent","Programming Language :: Python :: 3","Programming Language :: Python :: 3 :: Only","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.13","Topic :: Software Development"],"requires_python":">=3.8","project_url":["Bug Tracker, https://github.com/python/typing_extensions/issues","Changes, https://github.com/python/typing_extensions/blob/main/CHANGELOG.md","Documentation, https://typing-extensions.readthedocs.io/","Home, https://github.com/python/typing_extensions","Q & A, https://github.com/python/typing/discussions","Repository, https://github.com/python/typing_extensions"],"description":"# Typing Extensions\n\n[![Chat at https://gitter.im/python/typing](https://badges.gitter.im/python/typing.svg)](https://gitter.im/python/typing)\n\n[Documentation](https://typing-extensions.readthedocs.io/en/latest/#) –\n[PyPI](https://pypi.org/project/typing-extensions/)\n\n## Overview\n\nThe `typing_extensions` module serves two related purposes:\n\n- Enable use of new type system features on older Python versions. For example,\n  `typing.TypeGuard` is new in Python 3.10, but `typing_extensions` allows\n  users on previous Python versions to use it too.\n- Enable experimentation with new type system PEPs before they are accepted and\n  added to the `typing` module.\n\n`typing_extensions` is treated specially by static type checkers such as\nmypy and pyright. Objects defined in `typing_extensions` are treated the same\nway as equivalent forms in `typing`.\n\n`typing_extensions` uses\n[Semantic Versioning](https://semver.org/). The\nmajor version will be incremented only for backwards-incompatible changes.\nTherefore, it's safe to depend\non `typing_extensions` like this: `typing_extensions >=x.y, <(x+1)`,\nwhere `x.y` is the first version that includes all features you need.\n\n## Included items\n\nSee [the documentation](https://typing-extensions.readthedocs.io/en/latest/#) for a\ncomplete listing of module contents.\n\n## Contributing\n\nSee [CONTRIBUTING.md](https://github.com/python/typing_extensions/blob/main/CONTRIBUTING.md)\nfor how to contribute to `typing_extensions`.\n\n"}}],"environment":{"implementation_name":"cpython","implementation_version":"3.8.18","os_name":"posix","platform_machine":"x86_64","platform_release":"6.8.0-1025-azure","platform_system":"Linux","platform_version":"#30~22.04.1-Ubuntu SMP Wed Mar 12 15:28:20 UTC 2025","python_full_version":"3.8.18","platform_python_implementation":"CPython","python_version":"3.8","sys_platform":"linux"}}
